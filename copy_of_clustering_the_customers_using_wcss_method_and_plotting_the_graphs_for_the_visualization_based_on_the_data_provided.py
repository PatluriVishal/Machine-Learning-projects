# -*- coding: utf-8 -*-
"""Copy of Clustering the customers using WCSS method and plotting the graphs for the visualization based on the data provided.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1dlJxt3ylSEf70h3tXij8fx9eB8FdAauP
"""

import numpy as np
import matplotlib.pyplot as plt
from sklearn.cluster import KMeans
import pandas as pd
import seaborn as sns

#feeding the customer data from a csv file to Pandas Data frame
customer_data =pd.read_csv('/content/Mall_Customers.csv')

#First five rows in the data frame
customer_data.head()

#finding the number of columns and rows in the given data frame
customer_data.shape

#getting information about the data set
customer_data.info()

#checking the missing values
customer_data.isnull().sum()

"""Choosing the annual income column and spending score column"""

X=customer_data.iloc[:,[3,4]].values

print(X)

"""WCSS[Within clusters sum of the Squares method]

"""

#finding the WCSS values for different number of clusters
wcss=[]
for i in range(1,21):
  kmeans=KMeans(n_clusters=i,init='k-means++',random_state=42)
  kmeans.fit(X)
  wcss.append(kmeans.inertia_)

#plotting an elbow graph 
sns.set()
plt.plot(range(1,21),wcss)
plt.title("The Elbow point Graph")
plt.ylabel('WCSS')
plt.xlabel('Number of Clusters')
plt.show()



"""The Optimum Numbe rof clusters =5 since there is no singnificant drop in the Wcss value after the point at which the number of clusters =5.

"""

kmeans=KMeans(n_clusters=5,init='k-means++',random_state=0)
#We need to return a kind of label for each data point based on their cluster
Y=kmeans.fit_predict(X)
print(Y)



"""Visualization of the all clusters

"""

#plotiing alll the clusters ann their centroids
plt.figure(figsize=(10,10))
plt.scatter(X[Y==0,0],X[Y==0,1],s=50,c='red',label="Cluster no.1")
plt.scatter(X[Y==1,0],X[Y==1,1],s=50,c='yellow',label="Cluster no.2")
plt.scatter(X[Y==2,0],X[Y==2,1],s=50,c='blue',label="Cluster no.3")
plt.scatter(X[Y==3,0],X[Y==3,1],s=50,c='green',label="Cluster no.4")
plt.scatter(X[Y==4,0],X[Y==4,1],s=50,c='pink',label="Cluster no.5")
#plotting of the centroids of the respective clusters
plt.scatter(kmeans.cluster_centers_[:,0],kmeans.cluster_centers_[:,1],s=100,c='black',label='Centroids')
plt.title("Customers's clustering Groups")
plt.xlabel('Customer Groups')
plt.ylabel('Annual Income')
plt.show()